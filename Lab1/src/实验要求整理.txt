一、整体要求
	多线程/多进程，运行在一台机器上，并尝试利用所有的CPU核
二、输入输出要求
1.输入
	（1）开始运行时不带参数，即执行./sudoku即可正确运行。
	（2）开始后，程序可以从stdin读取多行字符串，每行字符串是一个文件名，
		每个文件中包含一个或多个待解数独问题。
	（3）输入文件中，一个数度问题占一行，包含81个十进制数字，从第1行到第
		9行依次排列，0意味着未知待填。
2.输出
	（1）计算所有输入文件中的数度问题，把解输出到stdout。
	（2）解的顺序要和输入的问题的顺序一致（也按输入文件排序），比如：
			fileA prob1
				  prob2
			fileB prob3
		则解的顺序应该是sov1,sov2,sov3，且每行一个解，包含81个十进制数。
三、基础版本要求
	1.接受一个输入文件名，文件大小小于100MB。
	2.解体并按上述格式输出。
	3.使用多线程/多进程，能利用大部分的CPU核。
四、建议
	1.使用事务队列来调度任务，并merge results to/from worker threads
	2.动态检测机器上有多少个CPU内核，以便决定程序使用多少个线程/进程，注意
	竞争。
五、撰写性能测试报告
	  先测试代码，并将测试报告连同代码提交到小组仓库中。测试报告描述测试输入
	与不同测试条件下的性能结果。具体来讲，应至少包含一下两部分：
	1.将最快的解法程序与简单的单线程版本进行对比，注意要在相同的环境下使用
	相同的输入。
	2.改变输入（例如改变文件大小）和环境（例如使用不同CPU和硬盘的机器），
	画出几条
	程序在不同环境下的性能曲线。
六、提交注意
	  将所有代码都放在Lab1文件夹中，并且写一个Makefile。编译过的可运行的二
	进制文件应该被命名为sudoku_solve，并且放在文件夹Lab1下。
